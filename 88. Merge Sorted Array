public class Solution {
    /**
     * However, the best conceivable time of this problem would be O(m * n) and the the best conceivable space would still be O(1).
     * We can do obtain the O(m * n) time by constructing a new array during comparing, but we would want to come up with a solution with both O(m * n) time and O(1) space
     * The way is, counterintuitively, to iterate both array from end to front, and construct nums1 from end to front.
     * As following:
    **/
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        if (nums1 == null || nums2 == null || nums1.length == 0 || nums2.length == 0) return;
        
        int p1 = m - 1;
        int p2 = n - 1;
        int index = m + n - 1;
        for (; index >= 0; index--) {
            if (p2 != -1 && p1 != -1) nums1[index] = nums1[p1] > nums2[p2] ? nums1[p1--] : nums2[p2--];
            else if (p2 != -1) nums1[index] = nums2[p2--];
        }
    }
    
    
    
    /**
     * Straight forward solution. 
     * Like the process of merge in merge sort
     * Compare each element of nums1 and nums2, put the smaller one to the right poisition in nums1 and move the 2 pointers. 
     * The process of put the smaller one to the right poisition including moving every element from this poisition to the end of nums1 1 step forward to maintain the sorted property of nums1. 
     * O(m * (n ^ 2)) time and O(1) space
    **/
    
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        if (nums1 == null || nums1.length == 0 || nums2 == null || nums2.length == 0) return;
        
        int p1 = 0, p2 = 0; //pointing to the start of nums1 and nums2 respectively
        while (p2 != n) {
            if (p1 < m) {
                if (nums1[p1] <= nums2[p2]) {
                    p1++;
                }
                else if (nums1[p1] > nums2[p2]) {
                    move(nums1, nums2[p2], p1, m);
                    p1++;
                    p2++;
                    m++;
                }
            }
            else {
                nums1[p1] = nums2[p2];
                p1++;
                p2++;
                m++;
            }
        }
    }
    
    private void move(int[] nums, int target, int start, int end) {
        for (int i = end - 1; i >= start; i--) {
            nums[i + 1] = nums[i];
        }
        nums[start] = target;
    }
}
