public class Solution {
    /**
     * (3) 
     * Store the nums into a new List.
     * For every i length long sub array where i ranges from 0 to n-1, the subproblem could be who should be the first element in the current permutation. 
     * So we swap the number at the start index with each of the remaining numbers whose index is greater than start.
     * At this point, the remaining subproblem is to generating permutations with numbers from start + 1 to the end of the array.
     * Once start equals to numList.size(), we know we have arrived at a permutation we need. We add it to the ret list. 
    **/
    
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> permutations = new LinkedList<>();
        if (nums == null || nums.length == 0) return permutations;
        
        List<Integer> numList = new LinkedList<Integer>();
        for (int n : nums) {
            numList.add(n);
        }
        generatePermutation(numList, 0, permutations);
        return permutations;
    }
    
    private void generatePermutation(List<Integer> numList, int start, List<List<Integer>> ret) {
        if (start >= numList.size()) {
            ret.add(new LinkedList<Integer>(numList)); //Must create a new list and stores it into the ret list. 
            //Since numList is a reference type, if we add it directly into ret, all of the elements in ret would be just another pointer pointing to the same list which is also pointed by numList. 
        }
        else {
            for (int i = start; i < numList.size(); i++) {
                swap(numList, start, i);
                generatePermutation(numList, start + 1, ret);
                swap(numList, start, i);
            }
        }
    }
    
    private void swap(List<Integer> numList, int p1, int p2) {
        int tmp = numList.get(p1);
        numList.set(p1, numList.get(p2));
        numList.set(p2, tmp);
    }


    /** 
     * (2) 
     * Generate solution for length-n array from permutations of length-(n-1) array by simply add the new number to each possible n + 1 poistion in each of the existing permutations.
     * So we take out every possible permutaion of the length(n-1) array, adding the new number to it, and re-stores it into the result array.
    **/
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> permutations = new LinkedList<>();
        if (nums == null || nums.length == 0) {
            return permutations;
        }
        
        generatePermutation(nums, new LinkedList<Integer>(), permutations);
        return permutations;
    }
    
    private void generatePermutation(int[] nums, List<Integer> curr, List<List<Integer>> ret) {
        ret.add(new LinkedList<Integer>(curr));
        
        for (int i = 0; i < nums.length; i++) {
            int currSize = ret.size(); //remember the curr size of the ret to guarantee we only add the new number to the pervious permutaion results.
            for (int x = 0; x < currSize; x++) {
                List<Integer> currPerm = ret.get(x);
                for (int j = 0; j < i; j++) {
                    List<Integer> tmp = new LinkedList<Integer>(currPerm);
                    tmp.add(j, nums[i]);
                    ret.add(tmp);
                }
                currPerm.add(nums[i]); //This step is used to generate the new permutation where the newly added number is at the last poisition of the previous permutation. 
                //The purpose of this step is to make use of the original permutations in the ret list. Otherwise, we have to generate a new ret list and add new permutations into it and finally replace the original ret with this new ret. 
                //With this step, we don't have to construct a new 2-dimensional list for every outer most for loop. 
            }
        }
    }



    /**
     * (1)
     * Brute force algorithm
     * For every number of the nums array:
     * (1) If it is not in the current result, add it to the curr and recurse. Once the recursion returns, backtracking by removing the last number in the curr
     * (2) If it is in the current result, do nothing and continue the for loop.
     * (3) If the size of the curr is the same as the nums array, which means that every number in the nums has been added into curr, store curr in ret list and return. 
     * Low efficiency, since we have to judge for if it has already been added into curr for each number, it is 1 + 2 + 3 + ... + n for a length-n nums, and the for loop iterates for n times, it is O(n ^ 3) time.
     * 
     * 
     * Optimization:
     * A hashset can be used to store the numbers already existed in the current permutation, which could decrease the searching time of a existing number to O(1) each time. 
    **/
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ret = new LinkedList<>();
        if (nums == null || nums.length == 0) return ret;
        
        getResult (nums, ret, new LinkedList<Integer>(), new HashSet<Integer>());
        return ret;
    }
    
    private void getResult(int[] nums, List<List<Integer>> ret, List<Integer> curr, Set<Integer> set) {
        if (curr.size() == nums.length) {
            ret.add(new LinkedList<>(curr));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!set.contains(nums[i])) {
                curr.add(nums[i]);
                set.add(nums[i]);
                getResult(nums, ret, curr, set);
                set.remove(curr.get(curr.size() - 1));
                curr.remove(curr.size() - 1);
            }
        }
    }
}
