public class Solution {
    /**
     * Mathematical method
     * G(i) = i ^ (i / 2)
    **/
    
    public List<Integer> grayCode(int n) {
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < (1 << n); i++) { // (1 << n) - 1 is the total number of gray code for length n
            result.add(i ^ (i >> 1));
        }
        return result;
    }
    
    
    
    /**
     * Recursive Method
    **/
    
    int num = 0;
    public List<Integer> grayCode(int n) {
        List<Integer> result = new ArrayList<>();
        if (n <= 0) return result;
        
        backTrack(n, result);
        return result;
    }
    
    private void backTrack(int n, List<Integer> ret) {
        if (n == 0) {
            ret.add(num);
        }
        else {
            backTrack(n - 1, ret);
            num ^= (1 << (n - 1));
            backTrack(n - 1, ret);
        }
    }
    
    
    
    
    
    /**
     * Noticed that every poisition can only be 0 or 1. 
     * And gray code of length n can be solved by gray code of length (n - 1).
     * Say, 2 and 3. 
     * For gray code of length 2, we have "00, 01, 11, 10"
     * And for gray code of length 3, we have "000, 001, 011, 010, 110, 111, 101, 100" and "000, 001, 011, 010, 110, 100, 101, 111" and others. 
     * We noticed that for the first gray code, the last 2 digits is symmetric, and are exactly the in order and inverted order of length-2 gray code. And the first digit is 0 and 1 for each of the 2 set respectively. 
     * We can now solve this problem in a dynamic programming style. 
     * As following.
     * O(2 ^ n) time, O(2 ^ n) space
     **/
     
    public List<Integer> grayCode(int n) {
        List<Integer> result = new ArrayList<>();
        if (n <= 0) {
            return result;
        }
        
        result.add(0);
        result.add(1);
        for (int i = 2; i <= n; i++) {
            int tmp = 1 << (i - 1);
            int size = result.size() - 1;
            for (int j = size; j >= 0; j--) {
                result.add(result.get(j) | tmp);
            }
        }
        return result;
    }
}
