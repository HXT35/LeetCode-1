public class SnakeGame {
    /** Initialize your data structure here.
    @param width - screen width
    @param height - screen height 
    @param food - A list of food positions
    E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    
    //428ms
    //Looks like the cost of keep a hashset is more than the time saved by using hashset to check for body collision
    //See if we can speed up the program by using a HashSet to store the body indexs for quick checking of body collision
    Set<Integer> bodySet = new HashSet<Integer>();
    Deque<Integer> body = new LinkedList<Integer>();
    int[][] food;
    int score;
    int foodIndex;
    int width;
    int height;
    public SnakeGame(int width, int height, int[][] food) {
        this.width = width;
        this.height = height;
        this.food = food;
        score = 0;
        foodIndex = 0;
        body.offerLast(0);
        bodySet.add(0);
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    
    public int move(String direction) {
        if (score == -1) {
            return -1;
        }
        
        int head = body.peekFirst();
        int tail = body.pollLast();
        bodySet.remove(tail);
        int headRow = head / width;
        int headCol = head % width;
        switch (direction) { //Move the snake based on the direction
            case "U" : headRow--; break;
            case "D" : headRow++; break;
            case "L" : headCol--; break;
            case "R" : headCol++; break;
        }
        head = headRow * width + headCol;
        
        //First case
        if (headRow < 0 || headRow == height || headCol < 0 || headCol == width || bodySet.contains(head)) {
            return score = -1;
        }
        
        bodySet.add(head);
        body.offerFirst(head);
        //Second case
        if (foodIndex < food.length && headRow == food[foodIndex][0] && headCol == food[foodIndex][1]) {
            foodIndex++;
            bodySet.add(tail);
            body.offerLast(tail);
            return ++score;
        }
        
        //Third case
        return score;
    }    
    
    
    
    

    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
           
           
        //310ms
        Deque<Integer> body = new LinkedList<Integer>(); //stores the indexs of the body of the snake
        int foodIndex = 0; //stores the index of the food that should appear
        int score = 0;
        int[][] food;
        int width;
        int height;
        //2-D indexes are stored as 1-D indexs
        
    public SnakeGame(int width, int height, int[][] food) {
        this.food = food;
        this.width = width;
        this.height = height;
        body.add(0); //initial position of the snake is (0,0)
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    public int move(String direction) {
        if (score == -1) {
            return -1;
        }
        int head = body.getFirst();
        int tail = body.pollLast(); //remove the tail after moving and add it back if a food is eaten
        int headRow = head / width;
        int headCol = head % width;
        switch (direction) {
            case "U" : headRow--; break;
            case "D" : headRow++; break;
            case "L" : headCol--; break;
            case "R" : headCol++; break;
        }
        head = headRow * width + headCol; //new head after moving
        
        //First case: Game over if the snake collides with the boarder or if it bites its body
        if (headRow < 0 || headRow == height || headCol < 0 || headCol == width || body.contains(head)) {
            return score = -1;
        }
        
        body.offerFirst(head); //add the new head because of success moving for second and third case
        //Second case: The snake eats the food successfully
        if (foodIndex < food.length && headRow == food[foodIndex][0] && headCol == food[foodIndex][1]) {
            foodIndex++;
            body.offerLast(tail); //add back the tail because of eating food
            return ++score;
        }
        
        //Third case: moving successfully but didn't eat the food
        return score;
    }
}

/**
 * Your SnakeGame object will be instantiated and called as such:
 * SnakeGame obj = new SnakeGame(width, height, food);
 * int param_1 = obj.move(direction);
 */
