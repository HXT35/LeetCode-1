public class Solution {
    /**
     * Bit manipulation
     * Noticed that there will be 2^n subsets in total. 
     * And 1 appears once every 2 subsets, 2 appears twice in every 4 consective subsets. 3 appears four times in every 8 consective subsets. 
     * Shown in the following:
     * [],[],[],[],[],[],[],[]
     * [],[1],[],[1],[],[1],[],[1]
     * [],[1],[2],[1,2],[],[1],[2],[1,2]
     * [],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]
     * O(nlogn + n * 2^n) time complexity
    **/
    
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return result;
        }
        
        Arrays.sort(nums);
        int numSubset = (int)Math.pow(2, nums.length);
        
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < numSubset; j++) {
                if (result.size() < j + 1) {
                    result.add(new ArrayList<>());
                }
                if (((j >> i) & 1) == 1) {
                    result.get(j).add(nums[i]);
                }
            }
        }
        
        return result;
    }
    
    
    
    /**
     * Backtracking algorithm
     * Try each possible starting number for current result, then try each possible number for next position in current result
     * Once finish trying, backtrack by removing the last number in the current result and try next possible value. 
     * Since we want to add all subsets into the result, we need to add current result to ret every time
     * O(C(0,n) + ... + C(n, n)) = O(2^n) time complexity since each number can either be in or not in the subset.
    **/
    
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return result;
        }
        
        result.add(new ArrayList<>()); //add a empty list to result
        backTrack(nums, 0, result, new ArrayList<Integer>());
        
        return result;
    }
    
    private void backTrack(int[] nums, int start, List<List<Integer>> ret, List<Integer> curr) {
        for (int i = start; i < nums.length; i++) {
            curr.add(nums[i]);
            ret.add(new ArrayList<Integer>(curr));
            backTrack(nums, i + 1, ret, curr);
            curr.remove(curr.size() - 1);
        }
    }
}
