/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    /**
     * In order to solve this question in O(n) time, we can only traverse each node once. 
     * If we do  this top-down, we are visiting each node several times, that is a lot of redundant work. 
     * More sepecifically, it is O(h * 2 ^ h) time, where h is the height of the tree. 
     * However, if we do this in a bottom-up style, and we return the size of BST, minimum value, maximum value to its upper level, we can achieve the goal of visiting each node only once. 
     * So we'll do it this way. 
     * O(n) time. 
     */
    public int largestBSTSubtree(TreeNode root) {
        if (root == null) return 0;
        
        int[] result = BSTSubtree(root);
        return Math.abs(result[0]);
    }
    
    private int[] BSTSubtree(TreeNode root) {
        //int[3], [treesize, minimum value of subtree, maximum value of subtree]
        if (root == null) return new int[]{0, Integer.MAX_VALUE, Integer.MIN_VALUE};
        
        int[] left = BSTSubtree(root.left);
        int[] right = BSTSubtree(root.right);
        
        if (left[0] < 0 || right[0] < 0 || root.val < left[2] || root.val > right[1]) {
            return new int[]{Math.max(Math.abs(left[0]), Math.abs(right[0])) * -1, 0, 0};
        } else {
            return new int[]{left[0] + right[0] + 1, Math.min(root.val, left[1]), Math.max(root.val, right[2])}; 
        }
    }
}
