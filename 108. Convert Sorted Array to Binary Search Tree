/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    /**
     * Constructing a tree contains 3 part: construct the root, construct the left subtree of the root, construct the right subtree of the root. 
     * This structure is apparently suitable for a recursive solution since thep process of constructing left subtree and right subtree is the same as its parent.
     * And since we want a balanced BST, we will use the mid point of the array each time to be the root of current tree or subtree. 
     * Use start and end as the indexes of the start point and end point of the array corresponding to current subtree.
     * Then construct the tree recursively.
     * O(n) time where n is the length of the array since we have to traverse each node once. 
    **/
        
    public TreeNode sortedArrayToBST(int[] nums) {

        if (nums == null || nums.length == 0) return null;
        
        TreeNode root = sortedArrayToBST(nums, 0, nums.length - 1);
        
        return root;
    }
    
    private static TreeNode sortedArrayToBST(int[] nums, int start, int end) {
        if (start > end) {
            return null;
        }
        int rootIndex =start + (end - start) / 2;
        TreeNode root = new TreeNode(nums[rootIndex]);
        root.left = sortedArrayToBST(nums, start, rootIndex - 1);
        root.right = sortedArrayToBST(nums, rootIndex + 1, end);
        
        return root;
    }
}
