public class Solution {


    /**
     * Another easy understandable code
     */
    public void reverseWords(char[] s) {
        if (s == null || s.length == 0) return;
        
        reverse(s, 0, s.length - 1);
        
        int start = 0;
        for (int i = 0; i < s.length; i++) {
            if (s[i] == ' ') {
                reverse(s, start, i - 1);
                start = i + 1;
            }
        }
        
        reverse(s, start, s.length - 1); //corner case, if there is only 1 word or reverse the last word. 
    }
    
    private void reverse(char[] s, int start, int end) {
        while (start < end) {
            char tmp = s[start];
            s[start] = s[end];
            s[end] = tmp;
            start++;
            end--;
        }
    }
    
    
    
    /**
     * First reverse the whole char array
     * Then reverse each word back.
     * O(n) time, O(1) space
     */
    public void reverseWords(char[] s) {
        if (s == null || s.length == 0) return;
        
        reverse(s, 0, s.length - 1);
        reverseWord(s);
    }
    
    private void reverse(char[] s, int start, int end) {
        int i = start, j = end;
        while (i < j) {
            char c = s[i];
            s[i] = s[j];
            s[j] = c;
            i++;
            j--;
        }
    }
    
    private void reverseWord(char[] s) {
        int i = 0, j = 0;
        
        while (i < s.length) {
            while (i < j || (i < s.length && s[i] == ' ')) i++;
            while (j < i || (j < s.length && s[j] != ' ')) j++;
            reverse(s, i, j - 1);
        }
    }
}
