public class Solution {
    /**
     * For this question, we have to solve 2 subproblems:
     * 1. how to find range sum from i to j in O(1) time
     * 2. how to find the start and end index of the range in O(1) time
     * We definitely have to keep some state of the sums in order to query them in O(1) time. 
     * In order to find the range sum from i to j in O(1) time, we can use the same technique in range sum, that is, we keep the sum from 0 to i for i in 1 to nums.length - 1. 
     * Then for any sum from i to j, we just use sum(j) - sum(i) to get them in O(1) time. 
     * For index querying, we use a hashmap in which keeps the sum as the key and the index as the value. 
     * Noticed that we only want the maximum size subarray, thus we only put the left most index of a sum, in code, that is to only put in a sum-index pair when we first meet them since we scan the sum array from left to right. 
     * Thus, for the maximum size subarray from i to j that satisfying sum(j) - sum(i) == k, the length is j - i. So for a given sum(j), we are always looking for (sum(j) - k)'s index in the hashmap.
     * Meanwhile, we put (0, -1) in the hashmap. That is because once a range sum from 0 to i is equal to k, its length should be i + 1. In whis way we don't have to deal with the boundary condition. 
     * O(n) time, O(n) space where n is the length of the nums array. 
     */
    public int maxSubArrayLen(int[] nums, int k) {
        if (nums == null || nums.length == 0) return 0;
        
        Map<Integer, Integer> sums = new HashMap<>();
        sums.put(0, -1);
        for (int i = 1; i < nums.length; i++) {
            nums[i] += nums[i - 1];
        }
        
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            if (sums.containsKey(nums[i] - k)) {
                max = Math.max(max, i - sums.get(nums[i] - k));
            }
            if (!sums.containsKey(nums[i])) {
                sums.put(nums[i], i);
            }
        }
        
        return max;
    }
}
