/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
	/**
	 * Iterative method
	 * Like the merge step of merge sort
	 * O(n) time where n is the sum of the length of l1 and l2.
	 */
	public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
		//corner case
		if (l1 == null) {
			return l2;
		}
		if (l2 == null) {
			return l1;
		}
		
		ListNode dummy = new ListNode(0);
		ListNode curr = dummy;
		ListNode curr1 = l1;
		ListNode curr2 = l2;
		
		while (curr1 != null && curr2 != null) {
			if (curr1.val > curr2.val) {
				curr.next = curr2;
				curr2 = curr2.next;
			} else {
				curr.next = curr1;
				curr1 = curr1.next;
			}
			curr = curr.next;
		}
		if (curr1 != null) {
			curr.next = curr1;
		}
		if (curr2 != null) {
			curr.next = curr2;
		}
		
		return dummy.next;
	}
	
	
	
	
	/**
	 * Recursive solution
	 */
	public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
		if (l1 == null) {
			return l2;
		}
		if (l2 == null) {
			return l1;
		}
		
		ListNode dummy;
		if (l1.val > l2.val) {
			dummy = l2;
			dummy.next = mergeTwoLists(l1, l2.next);
		} else {
			dummy = l1;
			dummy.next = mergeTwoLists(l1.next, l2);
		}
		
		return dummy;
	}
}
