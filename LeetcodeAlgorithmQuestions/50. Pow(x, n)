public class Solution {
    /**
     * 对于任何涉及int n类型的输入，我们都必须要考虑到这个整型的n溢出的问题。
     * 因为int类型的数据只能表示-2147483648到2147483647的范围。所以当我们需要讲一个负数n变为正数的时候，必须注意-2147483648直接加负号变正是会溢出的。
     * 此时就需要做相应的处理来防止这种情况的发生。
     * 另外，java进行位运算的时候一定要把位运算单独放在括号中。不然会报错。
    **/
    
    
    /**
     * Iteration
    **/
    public double myPow(double x, int n) {
        double answer = 1.0;
        if (x == 0 || x == 1) return x;
        if (n < 0) {
            answer = (1 / x) * myPow(1 / x, -(n + 1)); // prevent overflow
        }
        while (n > 0) {
            if ((n & 1) != 0) {
                answer *= x;
            }
            x *= x;
            n >>= 1;
        }
        return answer;
    }
    
    
    
    
    
    /** 
     * Recursion
    **/
    public double myPow(double x, int n) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        if (n < 0) return (1 / x) * myPow(1 / x, -(n + 1)); //prevent overflow when convert n to -n
        if (n == 0) return 1;
        return (n % 2 == 0) ? myPow(x * x, n / 2) : x * myPow(x * x, n / 2);
    }
}
