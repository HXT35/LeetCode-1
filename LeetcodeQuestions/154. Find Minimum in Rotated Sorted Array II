public class Solution {
    
    
    /**
     * Based on our knowledge of Find Minimum in Rotated Sorted Array I, we know that the basic idea is to find out which sub-monotony interval do mid located during a binary search. 
     * However, observing that in this question there could be duplicates in the array. That, in fact, affects our ability to decide which part do mid located in in the first step. Since if nums[mid] == nums[start] && nums[mid] == nums[end], then we wouldn't be able to find out where mid is. 
     * Thus we have to solve this condition first. 
     * And the approach is quite straight forward. 
     * Just skip every nums[end] that is equal to nums[start] before starting the binary search. 
     * Then we could perform the same process as Find Minimum in Rotated Sorted Array I. 
     * 
     * O(1) space. 
     * O(logn) normally. O(n) worst case when every number in the array is the same. 
     */
    public int findMin(int[] nums) {
        if (nums == null || nums.length == 0) {
            return Integer.MIN_VALUE;
        }
        
        int start = 0, end = nums.length - 1;
        
        //only need to add the following while loop on top of the solution 
        //for Part I
        //if two line segments have overlap, remove the overlap.
        //so, the problem can be solved as Part I
        while (nums[end] == nums[start] && end > start) {
            end--;
        }
        
        while (start < end) {
            //if the linear monotonically increasing in [start, end]
            if (nums[start] < nums[end]) {
                return nums[start];
            }
            
            int mid = start + (end - start) / 2;
            if (nums[mid] >= nums[start]) {
                start = mid + 1;
            }
            else {
                end = mid;
            }
        }
        
        return nums[start];
    }
    
    
    /**
     * Yet another approach to skip duplicates within the binary search process. 
     */
    
    public int findMin(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        int start = 0, end = nums.length - 1;
        while (start < end) {
            int mid = start + (end - start) /2;
            
            if (nums[mid] > nums[end]) {
                start = mid + 1;
            } else if (nums[mid] < nums[end]) {
                end = mid;
            } else { //if nums[start] == nums[end], skip the end.
                end--;
            }
        }
        
        return nums[start];
    }
}
