/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    /**
     * A clean recursion method
     * O(n) space, O(n) space
    **/
    public ListNode reverseList(ListNode head) {

        return reverse(head, null);
    }
    
    private ListNode reverse(ListNode head, ListNode newHead) {
        if (head == null) {
            return newHead;
        }
        
        ListNode next = head.next;
        head.next = newHead;
        return reverse(next, head);
    }
    
    
    
    /**
     * Recursion method
     * O(n) time, O(n) space
    **/
    
    public ListNode reverseList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        
        ListNode tmp = reverse(head);
        head.next = null;
        return tmp;
    }
    
    private ListNode reverse(ListNode head) {
        if (head.next != null) {
            ListNode tmp = reverse(head.next);
            head.next.next = head;
            return tmp;
        }
        else {
            return head;
        }
    }
    
    
    /**
     * Iteration method
     * Use a newHead to keep track of the previous node, each time let head.next = newHead while still keep next to record the next node we need to visit before we changing the next pointer of current node. 
     * Then simple let head = next to continue the traverse process. 
     * O(n) time, O(1) space
    **/
    public ListNode reverseList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        
        ListNode newHead = null;
        while (head != null) {
            ListNode next = head.next;
            head.next = newHead;
            newHead = head;
            head = next;
        }
        
        return newHead;
    }
}
