public class Solution {
    /**
     * Based on the requirement of this question, we can conclude the following condition for it:
     * 1. Everyone has to get at least 1 candy. 
     * 2. if a child get a value higher than both previous and next child, then his candy number should be max(leftCandy, rightCandy) + 1
     * 3. if a child get a value only heigher than child on one side of it, then his/her candy should be 1 + the candy of the child with the lower valie. 
     * 4. if a child get a value less than both side, then no adding operation. 
     * Based on this observation, we can generate the brute force approach of this quesiton. That is, scan the ratings array several time until it converge based on above rule. 
     * After that we could get the total number of candies. 
     * However, this is O(kn) time, k is the number of scans needed until converge. 
     * Why we need several scan? Notied that we could solve the condition when current child has higher score than previous child in one pass since it is rather easy to decide, just add 1 to previous candy. 
     * Thus we could first scan the array from start to end, then from end to start. 
     * Then we pick up the max number for each position and add them up, which is the total number of candy. 
     * Thus we get a 3-pass solution.
     * O(3n) time, O(2n) space. 
     */
    public int candy(int[] ratings) {
        if (ratings == null || ratings.length == 0) return 0;
        
        int[] inorder = new int[ratings.length];
        int[] invert = new int[ratings.length];
        
        for (int i = 0; i < ratings.length; i++) {
            if (i == 0 || ratings[i] <= ratings[i - 1]) {
                inorder[i] = 1;
            } else if (ratings[i] > ratings[i - 1]) {
                inorder[i] = inorder[i - 1] + 1;
            }
        }
        
        for (int i = ratings.length - 1; i >= 0; i--) {
            if (i == ratings.length - 1 || ratings[i] <= ratings[i + 1]) {
                invert[i] = 1;
            } else if (ratings[i] > ratings[i + 1]) {
                invert[i] = invert[i + 1] + 1;
            }
        }
        
        int ret = 0;
        for (int i = 0; i < ratings.length; i++) {
            ret += Math.max(inorder[i], invert[i]);
        }
        
        return ret;
    }
    
    /**
     * Further optimized it to a O(2n) time, O(n) space
     */
    public int candy(int[] ratings) {
        if (ratings == null || ratings.length == 0) return 0;
        
        int len = ratings.length;
        int[] candy = new int[len];
        candy[0] = 1;
        for (int i = 1; i < len; i++) {
            if (ratings[i] > ratings[i - 1]) {
                candy[i] = candy[i - 1] + 1;
            } else {
                candy[i] = 1;
            }
        }
        
        int total = 0;
        for (int i = len - 1; i > 0; i--) {
            if (ratings[i - 1] > ratings[i]) {
                candy[i - 1] = Math.max(candy[i] + 1, candy[i - 1]);
            }
            total += candy[i];
        }
        total += candy[0];
        
        return total;
    }
}
