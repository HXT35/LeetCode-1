public class Solution {
    /**
     * Use a 2D dp array to store the intermediate solution
     * So there are 3 main conditions in this question:
     * 1. s.charAt(i) == p.charAt(j), dp[i][j] = dp[i - 1][j - 1];
     * 2. p.charAt(j) == '.', dp[i][j] = dp[i - 1][j - 1];
     * 3. p.charAt(j) == *, there are 2 subconditions here. 
     *  3.1 p.charAt(j - 1) != s.charAt(i - 1) && p.charAt(j - 1) != '.', dp[i][j] = dp[i][j - 2], a* is treated as empty string
     *  3.2 p.charAt(j - 1) == s.charAt(i - 1) || p.charAt(j - 1) == '.':
     *      dp[i][j] = dp[i - 1][j], a* is treated as multiple a
     *      dp[i][j] = dp[i][j - 1], a* is treated as single a
     *      dp[i][j] = dp[i][j - 2], a* is treated as zero a
     */
    public boolean isMatch(String s, String p) {
        if (s == null || p == null) return false;
        
        boolean[][] dp = new boolean[s.length() + 1][p.length() + 1];
        dp[0][0] = true;
        
        for (int i = 0; i < p.length(); i++) {
            if (p.charAt(i) == '*' && dp[0][i - 1]) {
                dp[0][i + 1] = true;
            }
        }
        
        for (int i = 0; i < s.length(); i++) {
            for (int j = 0; j < p.length(); j++) {
                if (p.charAt(j) == '.') {
                    dp[i + 1][j + 1] = dp[i][j];
                }
                if (p.charAt(j) == s.charAt(i)) {
                    dp[i + 1][j + 1] = dp[i][j];
                }
                if (p.charAt(j) == '*') {
                    if (p.charAt(j - 1) != s.charAt(i) && p.charAt(j - 1) != '.') {
                        dp[i + 1][j + 1] = dp[i + 1][j - 1]; //'*' is treated as 0 
                    } else {
                        dp[i + 1][j + 1] = dp[i][j + 1] || dp[i + 1][j - 1] || dp[i + 1][j];
                        //'a*' is treated as multiple a, zero a or single a
                    }
                }
            }
        }
        
        return dp[s.length()][p.length()];
    }
}
