/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    /**
     * Recursive solution
     */
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ret = new ArrayList<>();
        postorderTraversal(root, ret);
        return ret;
    }
    
    private void postorderTraversal(TreeNode root, List<Integer> ret) {
        if (root == null) return;
        postorderTraversal(root.left, ret);
        postorderTraversal(root.right, ret);
        ret.add(root.val);
    }
    
    
    /**
     * Iterative solution
     * Keep a hashset to store visited nodes to prevent cycle.
     */
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ret = new ArrayList<>();
        
        if (root == null) return ret;
        
        Deque<TreeNode> deque = new ArrayDeque<>();
        
        //initialization the deque
        TreeNode curr = root;
        deque.push(root);
        Set<TreeNode> visited = new HashSet<>();
        //TreeNode pre = deque.peek(); //keep track of the previously visited node to prevent cycle
        
        while (!deque.isEmpty()) {
            curr = deque.peek();
            if (curr.left != null && !visited.contains(curr.left)) {
                deque.push(curr.left);
            } else if (curr.right != null && !visited.contains(curr.right)) {
                deque.push(curr.right);
            } else {
                visited.add(curr);
                ret.add(curr.val);
                deque.pop();
            }
        }
        
        return ret;
    }
}
