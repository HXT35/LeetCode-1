/* The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); */

public class Solution extends VersionControl {
    /** (1) */
    public int firstBadVersion(int n) {
        if (n <= 0) return Integer.MIN_VALUE;
        
        int start = 1;
        int end = n;
        while (start <= end) {
            //IMPORTANT: prevent overflow. REMEMBER
            int mid = start + (end - start) / 2;
            
            if (isBadVersion(mid)) { //Case1: find a bad version
                if (!isBadVersion(mid - 1)) { //if its previous one is not a bad version, then return 
                    return mid;
                } else { //if not search on left part
                    end = mid - 1;
                }
            } else { //Case 2: not a bad version. search on right part
                start = mid + 1;
            }
        }
        
        return Integer.MIN_VALUE;
    }
    
    /** (2) */
    public int firstBadVersion(int n) {
        if (n <= 0) return Integer.MIN_VALUE;
        
        int start = 1;
        int end = n;
        while (start < end - 1) {
            int mid = start + (end - start) / 2;
            if (!isBadVersion(mid)) {
                start = mid;
            } else {
                end = mid;
            }
        }
        
        return isBadVersion(start) ? start : end;
    }
}
