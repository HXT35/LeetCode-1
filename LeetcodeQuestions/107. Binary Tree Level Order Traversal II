/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
	/**
	 * A simply appoach would be to perform a normal level order traversal and reverse the result.
	 * O(n) time. O(logn) space for recursion stack. 
	 */
	public List<List<Integer>> levelOrderBottom(TreeNode root) {
		List<List<Integer>> ret = new ArrayList<>();

		levelOrderTraverse(root, ret, 0);
		Collections.reverse(ret);
		return ret;
	}

	public void levelOrderTraverse(TreeNode root, List<List<Integer>> ret, int level) {
		if (root == null) return;
		
		if (ret.size() <= level) {
			ret.add(new ArrayList<>());
		}
		ret.get(level).add(root.val);
		levelOrderTraverse(root.left, ret, level + 1);
		levelOrderTraverse(root.right, ret, level + 1);
	}
	
	
	/**
	 * We could also use iteration to solve this question. 
	 * In order to avoid the reverse process, we could utilize stack to store the traverse result of each level. 
	 * In this way, the result of the last level is on the top of the stack. And then we could store them into a new 2d list. 
	 * O(n + logn) = O(n) time. Traverse the tree --> O(n) time. Put all levels from stack into list --> O(logn) time. 
	 * O(n/2) space in the worst case if the tree is a complete tree. 
	 * Because in a complete tree there are n/2 nodes in the last level, which is put in the queue simultaneously. 
	 */
	public List<List<Integer>> levelOrderBottom(TreeNode root) {
		List<List<Integer>> ret = new ArrayList<>();
		if (root == null) return ret;
		
		Deque<TreeNode> queue = new ArrayDeque<>();
		Deque<List<Integer>> stack = new ArrayDeque<>();
		queue.offer(root);
		while(!queue.isEmpty()) {
			int currSize = queue.size();
			List<Integer> tmp = new ArrayList<>();
			for(int i = 0; i < currSize; i++) {
				TreeNode node = queue.poll();
				if(node.left != null) queue.offer(node.left);
				if(node.right != null) queue.offer(node.right);
				tmp.add(node.val);
			}
			stack.push(tmp);
		}
		
		while(!stack.isEmpty()) {
			ret.add(stack.pop());
		}
		
		return ret;
	}
}

