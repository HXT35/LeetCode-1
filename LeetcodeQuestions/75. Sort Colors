public class Solution {
    
    /**(3)
     * Another one-pass constant space solution. 
     * The basic idea is following:
     * 1. move 1 and 2 one-step backward when adding a new 0 at the front of the array.
     * 2. move 2 one-step backward when adding a new 1 to the front of the array.
     * 3. assign 2 directly because its the greatest value
    **/
    
    public void sortColors(int[] nums) {
        if (nums == null || nums.length == 0) return;
        
        int start0 = -1, start1 = -1, start2 = -1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                nums[++start2] = 2;
                nums[++start1] = 1;
                nums[++start0] = 0;
            }
            else if (nums[i] == 1) {
                nums[++start2] = 2;
                nums[++start1] = 1;
            }
            else if (nums[i] == 2) {
                nums[++start2] = 2;
            }
        }
    }
    
    
    
    
    
    /**(2)
     * We want a one-pass constant space solution.
     * Noticed that there is only 3 different numbers in the array. It's a natural thought to put them in the front, middle and end of the array. But how should we deal with it? 
     * We can put 0 from the beginning of the array, put 2 from the end of the array, and 1 will be automatically left in the middle
    **/
    
    public void sortColors(int[] nums) {
        if (nums == null || nums.length == 0) { //deal with illegal input
            return;
        }
        
        int start = 0, end = nums.length - 1;
        for (int i = 0; i <= end; i++) {  //Only need to loop until the end index since every number after end is 2 and don't need to be test again
            if (nums[i] == 0) { //start is guaranteed to be less than or equal to i
                //Since all indexes less than or equal to i is already sorted, the only number we may swap with this 0 is 1, and we don't care about 1, so we don't have to minus 1 from i.
                swap(nums, i, start);
                start++;
            }
            if (nums[i] == 2) {
                //Under this condition, nums[i] is swap with some number from the right side of i which is not sorted, it could be another 2 or a 0 that is being swaped to this poisition.
                //So we have to minus 1 from i and test this position again. 
                swap(nums, i, end);
                end--;
                i--;
            }
        }
    }
    
    private void swap(int[] nums, int i, int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
    
    
    /**(1)
     * Since there is only 3 possible values in the nums array, we can simply traverse through the array and count for the number of 0s, 1s and 2s. Then we go through the array again and overwrite it with the number of values we got. 
     */
    public void sortColors(int[] nums) {

        if (nums == null || nums.length == 0) {
            return;
        }
        
        int count0 = 0, count1 = 0, count2 = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) count0++;
            else if (nums[i] == 1) count1++;
            else count2++;
        }
        
        for (int i = 0; i < nums.length; i++) {
            if (i < count0) nums[i] = 0;
            else if (i < count0 + count1) nums[i] = 1;
            else nums[i] = 2;
        }
    }
}
