public class Solution {
    /**
     * Sieve of Eratosthenes
     */
    public int countPrimes(int n) {
        if (n <= 0) return 0;
        
        boolean[] nums = new boolean[n];
        for (int i = 2; i < n; i++) {
            nums[i] = true;
        }
        
        for (int i = 2; i * i < n; i++) {
            if (!nums[i]) {
                continue;
            }
            for (int j = i * i; j < n; j += i) {
                nums[j] = false;
            }
        }
        
        int count = 0;
        for (int i = 2; i < n; i++) {
            if (nums[i]) {
                count++;
            }
        }
        return count;
    }
    
    
    
    /**
     * Sieve of Eratosthenes
     * In each round, we are marking n/2, n/3, n/5, n/7,...,n/p' numbers where p' is the largest prime number that is less than n. 
     * And since O(1/2 + 1/3 + ... + 1/p') = O(loglogn), the run time of this algorithm is O(nloglogn)
     * Since we do not have to give all the primes that is less than n, we could use a boolean array marked as true or false to solve this quesiton as well, which could save a lot of space since int in Java is 4 byte and boolan is roughly 1 byte.
     */
    public int countPrimes(int n) {
        if (n <= 0) return 0;
        
        int [] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = 1;
        }
        
        int count = 0;
        int bound = (int)Math.sqrt(n);
        for (int i = 2; i < n; i++) {
            if (nums[i] != 0) {
                count++;
                if (i <= bound) {
                    for (int j =  i * i; j < n; j += i) { 
                        if (nums[j] != 0) {
                            nums[j] = 0; 
                        }
                    }
                }
            }
        }
        
        return count;
    }
    
    
    
    /**
     * O(n^1.5) time, got TLE.
     * isPrime() takes O(n^0.5) time.
     */
    public int countPrimes(int n) {
        if (n <= 0) return 0;
        
        int count = 0;
        for (int i = 2; i < n; i++) {
            if (isPrime(i)) {
                count++;
            }
        }
        
        return count;
    }
    
    private boolean isPrime(int n) {
        if (num <= 1) return false;
        for (int i = 2; i <= Math.sqrt(n); i++) { //i * i <= n
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}
