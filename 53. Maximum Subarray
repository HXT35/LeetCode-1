public class Solution {
    /**(2)
     * Divide-and-conquer method.
     * The maximum summation of subarray can only exists under following conditions:
     * 1. the maximum summation of subarray exists in left half.
     * 2. the maximum summation of subarray exists in right half.
     * 3. the maximum summation of subarray exists crossing the midpoints to left and right. 
     * 1 and 2 can be reached by using recursive calls to left half and right half of the subarraies. 
     * Condition 3 can be found starting from the middle point to the left, then starting from the middle point to the right.
     * Then adds up these two parts and return. 
     * T(n) = 2*T(n/2) + O(n)
     * this program runs in O(nlogn) time
     */
    public int maxSubArray(int[] nums) {
        if (nums == null || nums.length == 0) return Integer.MIN_VALUE;
        
        int maxsum = subArray(nums, 0, nums.length-1);
        return maxsum;
    }
    
    private int subArray(int[] A, int left, int right){
        if (left == right){
            //base case
            return A[left];
        }
        int mid = left + (right-left)/2;
        int leftsum = subArray(A, left, mid); //left part of the subarray sum, condition 1
        int rightsum = subArray(A, mid+1, right); //right part of the subarray sum, condition 2
        int middlesum = midSubArray(A, left, mid, right); //cross part of the subarray sum, condition 3
        // System.out.println(leftsum);
        // System.out.println(rightsum);
        // System.out.println(middlesum);
        
        //following if condition will return middlesum if lost the "=" under the conditon of leftsum = rightsum, which may be problematic if leftsum = rightsum < middlesum.
        //for example: [-1, -1, -2, -2]
        if (leftsum >= rightsum && leftsum >= middlesum){
            return leftsum;
        }
        if (rightsum >= leftsum && rightsum >= middlesum){
            return rightsum;
        }
        return middlesum;
    }
    
    private int midSubArray(int[] A, int left, int mid, int right){
        int leftsum = Integer.MIN_VALUE;
        int rightsum = Integer.MIN_VALUE;
        int sum = 0;
        for (int i = mid; i >= left; i--){
            sum += A[i];
            if (leftsum < sum){
                leftsum = sum;
            }
        }
        
        sum = 0;
        for (int j = mid + 1; j <= right; j++){
            sum += A[j];
            if (rightsum < sum){
                rightsum = sum;
            }
        }
        
        return leftsum + rightsum;
    }
    
    /**(1)
     * 2 pointers brute force solution?
     * Since we want to know the maximum subarray, we need to mark a subarray. 2 pointers can mark a subarray from its original array buy let the 2 pointers pointing to the begin and end index of the subarray. 
     * So the brute force solution would be to use 2 for loop to traverse every possibility. It is O(n^2) time. 
     * How to optimize it?
     * We didn't do any duplicated work since we are checking different subarrays every time. 
     * But we do did some meaningless work by checking every possibility. 
     * Noticed a negative number plus any number is less than the original number, a maximum subarray can never be constructed with the beginning number as negative. 
     * In this case, a maximum subarray can never be constructed with its previous currSum being negative. 
     * So we just let currSum to be 0 if it is negative. (throw it away)
     * O(n) algorithm
     * Use a global maximum to store the maximum we have found. 
     * use a currSum to keep track of the current sum we got, once it is negative, let it to be 0 and keep adding following numbers. 
     * Since we need to visit each number at least once, O(n) is the best conceivable time, we cannot optimize it any more. 
     */
    public int maxSubArray(int[] nums) {
        if (nums == null || nums.length == 0) return Integer.MIN_VALUE;
        
        int max = Integer.MIN_VALUE;
        int currSum = 0;
        int len = nums.length - 1;
        for (int i = 0; i <= len; i++) {
            currSum = Math.max(currSum + nums[i], nums[i]); //throw away previous currSum if it is less than 0.
            max = Math.max(max, currSum); //update global max value
        }
        
        return max;
    }
    
}
