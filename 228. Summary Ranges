public class Solution {
    /**
     * Noticed that the array is a sorted array. 
     * Keep 2 pointers recording the start and end of a range.
     * Thus we can scan the array directly and update start and end of a range during traversing. 
     * O(n) time, O(1) space. 
     */
    public List<String> summaryRanges(int[] nums) {
        if (nums == null || nums.length == 0) return new ArrayList<String>();
        
        int start = nums[0];
        int end = nums[0];
        List<String> ret = new ArrayList<>();
        for (int i = 1; i < nums.length; i++) {
            if (end == nums[i] - 1) {
                end = nums[i];
            } else if (end < nums[i] - 1) {
                ret.add(new String(start == end ? String.valueOf(start) : String.valueOf(start) + "->" + String.valueOf(end)));
                start = nums[i];
                end = start;
            }
        }
        ret.add(new String(start == end ? String.valueOf(start) : String.valueOf(start) + "->" + String.valueOf(end)));
        
        return ret; 
    }
}
